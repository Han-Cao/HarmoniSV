{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HarmoniSV A toolkit to harmonize and filter structural variations across methods and samples. Last updated: 2023-03-19 Features Harmonize population-scale SV calling and force-calling results from any SV callers Machine learning SV filter to balance accuracy and sensitivity Fast VCF manipulation via pysam Important This documentation is not finished yet. Please type harmonisv <command> -h to get help for each command.","title":"Introduction"},{"location":"#harmonisv","text":"A toolkit to harmonize and filter structural variations across methods and samples. Last updated: 2023-03-19","title":"HarmoniSV"},{"location":"#features","text":"Harmonize population-scale SV calling and force-calling results from any SV callers Machine learning SV filter to balance accuracy and sensitivity Fast VCF manipulation via pysam","title":"Features"},{"location":"#important","text":"This documentation is not finished yet. Please type harmonisv <command> -h to get help for each command.","title":"Important"},{"location":"command_list/","text":"Commands list Last updated: 2023-03-19 VCF manipulation harmonize Harmonize SV VCFs across samples and SV calling methods harmonize-header Harmonize VCF headers sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features SV analysis represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs","title":"Command list"},{"location":"command_list/#commands-list","text":"Last updated: 2023-03-19 VCF manipulation harmonize Harmonize SV VCFs across samples and SV calling methods harmonize-header Harmonize VCF headers sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features SV analysis represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs","title":"Commands list"},{"location":"quick_start/","text":"Quick start Last updated: 2023-03-19 Installation git clone https://github.com/Han-Cao/HarmoniSV.git cd HarmoniSV/src/harmoniSV chmod +x harmonisv Dependencies HarmoniSV is written in python3.8. The following python modules are required: pysam pandas numpy matplotlib scikit-learn pyranges Usage Go to the src/harmoniSV directory and run harmonisv : ./harmonisv HarmoniSV: A toolkit to harmonize and filter structural variantions across methods and samples Version: 0.1.0 Usage: harmonisv <command> [options] Commands: -- VCF manipulation harmonize Harmonize SV VCFs from across samples and SV calling methods harmonize-header Harmonize VCF headers sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features -- Analysis on SV callset represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs Note: 1. All input VCFs MUST follow the VCF specification 2. HarmoniSV assume specific variant ID format to index SVs from different methods and samples, please check the required ID format of different commands before you use 3. The input/output VCF format (i.e., vcf, vcf.gz, bcf) will be automatically detected For help on a specific command, run: harmonisv <command> -h","title":"Quick start"},{"location":"quick_start/#quick-start","text":"Last updated: 2023-03-19","title":"Quick start"},{"location":"quick_start/#installation","text":"git clone https://github.com/Han-Cao/HarmoniSV.git cd HarmoniSV/src/harmoniSV chmod +x harmonisv","title":"Installation"},{"location":"quick_start/#dependencies","text":"HarmoniSV is written in python3.8. The following python modules are required: pysam pandas numpy matplotlib scikit-learn pyranges","title":"Dependencies"},{"location":"quick_start/#usage","text":"Go to the src/harmoniSV directory and run harmonisv : ./harmonisv HarmoniSV: A toolkit to harmonize and filter structural variantions across methods and samples Version: 0.1.0 Usage: harmonisv <command> [options] Commands: -- VCF manipulation harmonize Harmonize SV VCFs from across samples and SV calling methods harmonize-header Harmonize VCF headers sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features -- Analysis on SV callset represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs Note: 1. All input VCFs MUST follow the VCF specification 2. HarmoniSV assume specific variant ID format to index SVs from different methods and samples, please check the required ID format of different commands before you use 3. The input/output VCF format (i.e., vcf, vcf.gz, bcf) will be automatically detected For help on a specific command, run: harmonisv <command> -h","title":"Usage"},{"location":"tutorial/","text":"Tutorial Last updated: 2023-03-19 TODO","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Last updated: 2023-03-19 TODO","title":"Tutorial"},{"location":"VCF_manipulation/harmonize/","text":"harmonize Harmonize SV VCFs across samples and SV calling methods Last updated: 2023-03-19 Input VCF : any VCF/BCF files following the VCF specification. ID format : no requirements Output VCF : VCF/BCF files following the VCF specification. ID format : {PREFIX}.{SVTYPE}.{NUMBER} if --rename-id --id-prefix PREFIX is specified, otherwise the same as input. Usage harmonisv harmonize [options] -i <input_vcf> -o <output_vcf> Examples Example 1: Harmonize sniffles2 (ver 2.0.6) output Output VCF of Sniffles2 store SV information (e.g., SVTYPE, SVLEN) in the INFO field, and the read depth of reference (DR) and variant (DV) alleles in the FORMAT field. The following command keep basic SV information and extract read depths to INFO fields. harmonisv harmonize \\ -i input.vcf.gz \\ # input VCF -o output.vcf.gz \\ # output VCF --info SVTYPE,SVLEN,END,STRANDS=STRAND \\ # INFO fields to be kept, rename STRAND to STRANDS --format-to-info DP=DR,DP=DV,RE=DV \\ # Extract FORMAT fields to INFO fields --sum \\ # Sum all values assigned to the same key (DP = DR + DV) --header header.txt \\ # New VCF header, please define new keys here (i.e., DP, RE) --rename-id \\ # rename ID to {PREFIX}.{SVTYPE}.{NUMBER} --id-prefix HG002.minimap2.sniffles2 # {SAMPLE}.{ALIGNER}.{CALLER} Arguments Required arguments -i, --invcf vcf input vcf -o, --outvcf vcf output vcf Optional arguments --info TAG Comma separated INFO tags to extract, can rename tag by NEW=OLD. Can give multiple candidate old tags for 1 new tag, priority from high to low. E.g., 'NEW=OLD1,NEW=OLD2' means if OLD1 is present, use OLD1, otherwise use OLD2. --info-to-alt TAG Comma separated INFO tags to fill in ALT, from high prioirty to low priority. This is useful for insertion sequence stored in INFO. --format-to-info TAG Comma separated FORMAT tags to be sum and add in INFO, from high prioirty to low priority. New headers must given by --header. --sum Change merge logic to sum, all tags must exist for all records. E.g., '--format-to-info DP=DR,DP=DV --sum' means 'INFO/DP = sum(FORMAT/DR + FORMAT/DV)' --header FILE New vcf header file to replace the header of invcf --header-str string Semicolon separated INFO header string added to new header (metadata separated by comma). e.g., 'DP,1,Integar,Sequencing depth;AF,1,Float,Allele frequency' --id-prefix PREFIX Rename SV ID to PREFIX.raw_ID. Final ID should be Sample.Aligner.Caller.unique_id for downstream analysis --rename-id Rename SV ID to PREFIX.SVTYPE.No., must use with --id-prefix --keep-old Keep raw INFO when rename, useful when merging (default: False) --keep-all Whether keep all INFO fields. If specified, only rename work in --info (default: False) --no-AC Disable automatically add AC to INFO (default: False) --no-check Disable vcf check and filter on ID, SVTYPE for downstream analysis (default: False)","title":"harmonize"},{"location":"VCF_manipulation/harmonize/#harmonize","text":"Harmonize SV VCFs across samples and SV calling methods Last updated: 2023-03-19","title":"harmonize"},{"location":"VCF_manipulation/harmonize/#input","text":"VCF : any VCF/BCF files following the VCF specification. ID format : no requirements","title":"Input"},{"location":"VCF_manipulation/harmonize/#output","text":"VCF : VCF/BCF files following the VCF specification. ID format : {PREFIX}.{SVTYPE}.{NUMBER} if --rename-id --id-prefix PREFIX is specified, otherwise the same as input.","title":"Output"},{"location":"VCF_manipulation/harmonize/#usage","text":"harmonisv harmonize [options] -i <input_vcf> -o <output_vcf>","title":"Usage"},{"location":"VCF_manipulation/harmonize/#examples","text":"","title":"Examples"},{"location":"VCF_manipulation/harmonize/#example-1-harmonize-sniffles2-ver-206-output","text":"Output VCF of Sniffles2 store SV information (e.g., SVTYPE, SVLEN) in the INFO field, and the read depth of reference (DR) and variant (DV) alleles in the FORMAT field. The following command keep basic SV information and extract read depths to INFO fields. harmonisv harmonize \\ -i input.vcf.gz \\ # input VCF -o output.vcf.gz \\ # output VCF --info SVTYPE,SVLEN,END,STRANDS=STRAND \\ # INFO fields to be kept, rename STRAND to STRANDS --format-to-info DP=DR,DP=DV,RE=DV \\ # Extract FORMAT fields to INFO fields --sum \\ # Sum all values assigned to the same key (DP = DR + DV) --header header.txt \\ # New VCF header, please define new keys here (i.e., DP, RE) --rename-id \\ # rename ID to {PREFIX}.{SVTYPE}.{NUMBER} --id-prefix HG002.minimap2.sniffles2 # {SAMPLE}.{ALIGNER}.{CALLER}","title":"Example 1: Harmonize sniffles2 (ver 2.0.6) output"},{"location":"VCF_manipulation/harmonize/#arguments","text":"","title":"Arguments"},{"location":"VCF_manipulation/harmonize/#required-arguments","text":"-i, --invcf vcf input vcf -o, --outvcf vcf output vcf","title":"Required arguments"},{"location":"VCF_manipulation/harmonize/#optional-arguments","text":"--info TAG Comma separated INFO tags to extract, can rename tag by NEW=OLD. Can give multiple candidate old tags for 1 new tag, priority from high to low. E.g., 'NEW=OLD1,NEW=OLD2' means if OLD1 is present, use OLD1, otherwise use OLD2. --info-to-alt TAG Comma separated INFO tags to fill in ALT, from high prioirty to low priority. This is useful for insertion sequence stored in INFO. --format-to-info TAG Comma separated FORMAT tags to be sum and add in INFO, from high prioirty to low priority. New headers must given by --header. --sum Change merge logic to sum, all tags must exist for all records. E.g., '--format-to-info DP=DR,DP=DV --sum' means 'INFO/DP = sum(FORMAT/DR + FORMAT/DV)' --header FILE New vcf header file to replace the header of invcf --header-str string Semicolon separated INFO header string added to new header (metadata separated by comma). e.g., 'DP,1,Integar,Sequencing depth;AF,1,Float,Allele frequency' --id-prefix PREFIX Rename SV ID to PREFIX.raw_ID. Final ID should be Sample.Aligner.Caller.unique_id for downstream analysis --rename-id Rename SV ID to PREFIX.SVTYPE.No., must use with --id-prefix --keep-old Keep raw INFO when rename, useful when merging (default: False) --keep-all Whether keep all INFO fields. If specified, only rename work in --info (default: False) --no-AC Disable automatically add AC to INFO (default: False) --no-check Disable vcf check and filter on ID, SVTYPE for downstream analysis (default: False)","title":"Optional arguments"},{"location":"VCF_manipulation/harmonize_header/","text":"harmonize-header Harmonize VCF headers Last updated: 2023-10-03 Input VCF : any VCF/BCF files following the VCF specification. ID format : no requirements Output VCF header : harmonized VCF header containing all header records of input VCFs Usage harmonisv harmonize-header [options] -i <input_vcf> -o <output_header> Examples The VCF headers from cuteSV, sniffles, and svim are harmonized. If one header occurs in more than one VCF, the priority is: sniffles > cuteSV > svim. harmonisv harmonize-header \\ -i HG002.minimap2.cuteSV.vcf,HG002.minimap2.sniffles.vcf,HG002.minimap2.svim.vcf \\ -o harmonized_header.txt \\ -r HG002.minimap2.sniffles.vcf # reference VCF has the highest priority Input: HG002.minimap2.cuteSV.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Precise structural variant\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Imprecise structural variant\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT NULL HG002.minimap2.sniffles.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE HG002.minimap2.svim.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT Sample Output: PRECISE , IMPRECISE , SVLEN , SVTYPE are defined in multiple VCFs, and the output use the definition in sniffles as it has the highest priority. STDEV_POS , STDEV_LEN , STD_SPAN , STD_POS are defined in single VCF and are appended to the output header. ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE Arguments Input/Output arguments: -i, --invcf VCF Comma-separated list of input VCF files. Duplicate headers will use the first one, including SAMPLE header. For multi-sample VCF, please make sure all input VCFs have the same SAMPLE order. -f, --file-list FILE_LIST File containing a list of input VCF files, one VCF per line. VCFs from both -i and -f will be used. -o, --output OUTPUT Output VCF header file optional arguments: -r, --ref-vcf VCF Reference VCF file, highest priority for duplicated headers","title":"harmonize-header"},{"location":"VCF_manipulation/harmonize_header/#harmonize-header","text":"Harmonize VCF headers Last updated: 2023-10-03","title":"harmonize-header"},{"location":"VCF_manipulation/harmonize_header/#input","text":"VCF : any VCF/BCF files following the VCF specification. ID format : no requirements","title":"Input"},{"location":"VCF_manipulation/harmonize_header/#output","text":"VCF header : harmonized VCF header containing all header records of input VCFs","title":"Output"},{"location":"VCF_manipulation/harmonize_header/#usage","text":"harmonisv harmonize-header [options] -i <input_vcf> -o <output_header>","title":"Usage"},{"location":"VCF_manipulation/harmonize_header/#examples","text":"The VCF headers from cuteSV, sniffles, and svim are harmonized. If one header occurs in more than one VCF, the priority is: sniffles > cuteSV > svim. harmonisv harmonize-header \\ -i HG002.minimap2.cuteSV.vcf,HG002.minimap2.sniffles.vcf,HG002.minimap2.svim.vcf \\ -o harmonized_header.txt \\ -r HG002.minimap2.sniffles.vcf # reference VCF has the highest priority Input: HG002.minimap2.cuteSV.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Precise structural variant\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Imprecise structural variant\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT NULL HG002.minimap2.sniffles.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE HG002.minimap2.svim.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT Sample Output: PRECISE , IMPRECISE , SVLEN , SVTYPE are defined in multiple VCFs, and the output use the definition in sniffles as it has the highest priority. STDEV_POS , STDEV_LEN , STD_SPAN , STD_POS are defined in single VCF and are appended to the output header. ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE","title":"Examples"},{"location":"VCF_manipulation/harmonize_header/#arguments","text":"","title":"Arguments"},{"location":"VCF_manipulation/harmonize_header/#inputoutput-arguments","text":"-i, --invcf VCF Comma-separated list of input VCF files. Duplicate headers will use the first one, including SAMPLE header. For multi-sample VCF, please make sure all input VCFs have the same SAMPLE order. -f, --file-list FILE_LIST File containing a list of input VCF files, one VCF per line. VCFs from both -i and -f will be used. -o, --output OUTPUT Output VCF header file","title":"Input/Output arguments:"},{"location":"VCF_manipulation/harmonize_header/#optional-arguments","text":"-r, --ref-vcf VCF Reference VCF file, highest priority for duplicated headers","title":"optional arguments:"}]}