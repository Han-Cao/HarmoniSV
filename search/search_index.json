{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HarmoniSV A toolkit to harmonize and filter structural variations across methods and samples. Last updated: 2023-12-04 Features Harmonize SVs discovered by different SV calling methods Filter high-confidence SVs with a random forest classifier Fast VCF manipulation, annotation, and conversion Important This documentation is not finished yet. Please type harmonisv <command> -h to get help for each command.","title":"Introduction"},{"location":"#harmonisv","text":"A toolkit to harmonize and filter structural variations across methods and samples. Last updated: 2023-12-04","title":"HarmoniSV"},{"location":"#features","text":"Harmonize SVs discovered by different SV calling methods Filter high-confidence SVs with a random forest classifier Fast VCF manipulation, annotation, and conversion","title":"Features"},{"location":"#important","text":"This documentation is not finished yet. Please type harmonisv <command> -h to get help for each command.","title":"Important"},{"location":"command_list/","text":"Commands list Last updated: 2023-03-19 VCF manipulation harmonize-header Harmonize VCF headers harmonize Harmonize SV VCFs across samples and SV calling methods sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features SV analysis represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs","title":"Command list"},{"location":"command_list/#commands-list","text":"Last updated: 2023-03-19 VCF manipulation harmonize-header Harmonize VCF headers harmonize Harmonize SV VCFs across samples and SV calling methods sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features SV analysis represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs","title":"Commands list"},{"location":"quick_start/","text":"Quick start Last updated: 2023-03-19 Installation git clone https://github.com/Han-Cao/HarmoniSV.git cd HarmoniSV/src/harmoniSV chmod +x harmonisv Dependencies HarmoniSV is written in python3.8. The following python modules are required: pysam pandas numpy matplotlib scikit-learn pyranges Usage Go to the src/harmoniSV directory and run harmonisv : ./harmonisv HarmoniSV: A toolkit to harmonize and filter structural variantions across methods and samples Version: 0.1.0 Usage: harmonisv <command> [options] Commands: -- VCF manipulation harmonize Harmonize SV VCFs from across samples and SV calling methods harmonize-header Harmonize VCF headers sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features -- Analysis on SV callset represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs Note: 1. All input VCFs MUST follow the VCF specification 2. HarmoniSV assume specific variant ID format to index SVs from different methods and samples, please check the required ID format of different commands before you use 3. The input/output VCF format (i.e., vcf, vcf.gz, bcf) will be automatically detected For help on a specific command, run: harmonisv <command> -h","title":"Quick start"},{"location":"quick_start/#quick-start","text":"Last updated: 2023-03-19","title":"Quick start"},{"location":"quick_start/#installation","text":"git clone https://github.com/Han-Cao/HarmoniSV.git cd HarmoniSV/src/harmoniSV chmod +x harmonisv","title":"Installation"},{"location":"quick_start/#dependencies","text":"HarmoniSV is written in python3.8. The following python modules are required: pysam pandas numpy matplotlib scikit-learn pyranges","title":"Dependencies"},{"location":"quick_start/#usage","text":"Go to the src/harmoniSV directory and run harmonisv : ./harmonisv HarmoniSV: A toolkit to harmonize and filter structural variantions across methods and samples Version: 0.1.0 Usage: harmonisv <command> [options] Commands: -- VCF manipulation harmonize Harmonize SV VCFs from across samples and SV calling methods harmonize-header Harmonize VCF headers sample2pop Convert single-sample VCF to multi-sample VCF intersect Intersect SVs with genomic features -- Analysis on SV callset represent Select the representative SV from merged SVs genotype Genotype SVs across SV genotyping methods filter Random forest filter for SVs concordance Calculate genotype concordance between two VCFs Note: 1. All input VCFs MUST follow the VCF specification 2. HarmoniSV assume specific variant ID format to index SVs from different methods and samples, please check the required ID format of different commands before you use 3. The input/output VCF format (i.e., vcf, vcf.gz, bcf) will be automatically detected For help on a specific command, run: harmonisv <command> -h","title":"Usage"},{"location":"tutorial/","text":"Tutorial Last updated: 2023-03-19 TODO","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Last updated: 2023-03-19 TODO","title":"Tutorial"},{"location":"SV_analysis/represent/","text":"harmonize Select the representative SV from merged SVs Last updated: 2023-12-05 Input VCF : Format : bi-allelic VCF/BCF files following the VCF specification Required INFO : SVTYPE , SVLEN , AC Required ID : unique ID across all input VCFs Manifest file : Format : one VCF per line SV merging results : Format : each line is comma-separated list of IDs of merged SVs, or the ID of unique SVs. Any SV merging method can be used. Particularly, we have tested Jasmine in the workflow. Output VCF : harmonized VCF/BCF files. ID format : {PREFIX}.{SVTYPE}.{NUMBER} if --rename-id --id-prefix PREFIX is specified, otherwise the same as input. Usage harmonisv represent [options] -i <input_vcf> -o <output_vcf> --merge <merge_file> harmonisv represent [options] -f <manifest> -o <output_vcf> --merge <merge_file> Representative SV SV calling results can vary significantly across different methods or samples. Therefore, merging SVs across samples and methods is a common practice to identify non-redundant SVs. Once the SVs are merged, the position, length, and alleles of the merged SV need to be determined. The represent command is used to select the representative SV from the merged SVs based on one of the following criteria: --by-max TAG : This option selects the SV with the maximum value of INFO/TAG . --by-freq : This option selects the SV with the maximum frequency of POS and SVLEN . If more than one SV has the same frequency, it selects the one closest to the average POS and SVLEN . Example 1. Select representative SVs from SVs merged across samples and methods In this example, we will first use Jasmine to merge SVs across samples and methods, and then use harmonisv represent to select the representative SV based on the prevalence of SVs' positions and lengths. # prepare manifest file for vcf in SampleA.Method1.vcf SampleA.Method2.vcf SampleB.Method1.vcf SampleB.Method2.vcf; do echo ${vcf} done > vcf_list.txt # SV merging across samples and methods jasmine \\ file_list=vcf_list.txt \\ out_file=merged.vcf \\ --keep_var_ids \\ --ignore_strand # extract SV merging results bcftools query -f '%IDLIST\\n' merged.vcf > merge.txt # Select representative SV based on the frequency of POS and SVLEN harmonisv represent \\ -f vcf_list.txt \\ -o representative.vcf \\ --merge merge.txt \\ --by-freq \\ --id-prefix Merged \\ # rename output SV ID as Merged.SVTYPE.NUMBER --save-id \\ # save merged SVs to INFO/ID_LIST --min-len-input 35 \\ # only SVs with SVLEN < 35 are considered when selecting representative SV --min-len-output 50 # drop representative SVs with SVLEN < 50 2. Remove duplicated SVs within the same sample and method SV calling methods may produce duplicated SVs within the same sequencing data. This example will first use Jasmine to merge SVs within the same sample and method, and then use harmonisv represent to select the representative SV based on the maximum value of reads supporting the SV. # SV merging within the same sample and method jasmine \\ file_list=input.vcf \\ out_file=jasmine.vcf \\ --comma_filelist \\ max_dist=200 \\ --allow_intrasample \\ --nonlinear_dist \\ --ignore_strand \\ --keep_var_ids # extract SV merging results bcftools query -f '%INTRASAMPLE_IDLIST\\n' jasmine.vcf > dup_sv.txt # Select representative SV based on the maximum value of reads supporting the SV (INFO/RE) harmonisv represent \\ -i input.vcf \\ -o dedup.vcf \\ --merge dup_sv.txt \\ --by-max RE \\ --min-len-input 30 \\ --min-len-output 30 Arguments Input/Output arguments: -i, --invcf VCF input VCF -f, --manifest TSV manifest file, one VCF per line -o, --outvcf VCF output VCF --merge FILE SV merging results, each line is a comma-separated list of IDs of merged SVs, or the ID of unique SVs -r, --region CHR genomic region to work on (requires VCF with index) Representative SV selection arguments: --id-prefix ID Rename output SV ID as PREFIX.SVTYPE.NUMBER --by-max TAG Select representative SV by maximum INFO/TAG value --by-freq Select representative SV by frequency of POS, SVLEN, if >1 SVs have same frequency, select the one closest to average POS, SVLEN --save-id Save original IDs to INFO/ID_LIST --keep-hom-ref Keep SVs with AC=0 before selecting representative SV (Default: False) --min-len-input N Remove SVLEN < min_len_input before selecting representative SV (Default: 35) --min-len-output N Remove SVLEN < min_len_output from output (Default: 50)","title":"represent"},{"location":"SV_analysis/represent/#harmonize","text":"Select the representative SV from merged SVs Last updated: 2023-12-05","title":"harmonize"},{"location":"SV_analysis/represent/#input","text":"VCF : Format : bi-allelic VCF/BCF files following the VCF specification Required INFO : SVTYPE , SVLEN , AC Required ID : unique ID across all input VCFs Manifest file : Format : one VCF per line SV merging results : Format : each line is comma-separated list of IDs of merged SVs, or the ID of unique SVs. Any SV merging method can be used. Particularly, we have tested Jasmine in the workflow.","title":"Input"},{"location":"SV_analysis/represent/#output","text":"VCF : harmonized VCF/BCF files. ID format : {PREFIX}.{SVTYPE}.{NUMBER} if --rename-id --id-prefix PREFIX is specified, otherwise the same as input.","title":"Output"},{"location":"SV_analysis/represent/#usage","text":"harmonisv represent [options] -i <input_vcf> -o <output_vcf> --merge <merge_file> harmonisv represent [options] -f <manifest> -o <output_vcf> --merge <merge_file>","title":"Usage"},{"location":"SV_analysis/represent/#representative-sv","text":"SV calling results can vary significantly across different methods or samples. Therefore, merging SVs across samples and methods is a common practice to identify non-redundant SVs. Once the SVs are merged, the position, length, and alleles of the merged SV need to be determined. The represent command is used to select the representative SV from the merged SVs based on one of the following criteria: --by-max TAG : This option selects the SV with the maximum value of INFO/TAG . --by-freq : This option selects the SV with the maximum frequency of POS and SVLEN . If more than one SV has the same frequency, it selects the one closest to the average POS and SVLEN .","title":"Representative SV"},{"location":"SV_analysis/represent/#example","text":"","title":"Example"},{"location":"SV_analysis/represent/#1-select-representative-svs-from-svs-merged-across-samples-and-methods","text":"In this example, we will first use Jasmine to merge SVs across samples and methods, and then use harmonisv represent to select the representative SV based on the prevalence of SVs' positions and lengths. # prepare manifest file for vcf in SampleA.Method1.vcf SampleA.Method2.vcf SampleB.Method1.vcf SampleB.Method2.vcf; do echo ${vcf} done > vcf_list.txt # SV merging across samples and methods jasmine \\ file_list=vcf_list.txt \\ out_file=merged.vcf \\ --keep_var_ids \\ --ignore_strand # extract SV merging results bcftools query -f '%IDLIST\\n' merged.vcf > merge.txt # Select representative SV based on the frequency of POS and SVLEN harmonisv represent \\ -f vcf_list.txt \\ -o representative.vcf \\ --merge merge.txt \\ --by-freq \\ --id-prefix Merged \\ # rename output SV ID as Merged.SVTYPE.NUMBER --save-id \\ # save merged SVs to INFO/ID_LIST --min-len-input 35 \\ # only SVs with SVLEN < 35 are considered when selecting representative SV --min-len-output 50 # drop representative SVs with SVLEN < 50","title":"1. Select representative SVs from SVs merged across samples and methods"},{"location":"SV_analysis/represent/#2-remove-duplicated-svs-within-the-same-sample-and-method","text":"SV calling methods may produce duplicated SVs within the same sequencing data. This example will first use Jasmine to merge SVs within the same sample and method, and then use harmonisv represent to select the representative SV based on the maximum value of reads supporting the SV. # SV merging within the same sample and method jasmine \\ file_list=input.vcf \\ out_file=jasmine.vcf \\ --comma_filelist \\ max_dist=200 \\ --allow_intrasample \\ --nonlinear_dist \\ --ignore_strand \\ --keep_var_ids # extract SV merging results bcftools query -f '%INTRASAMPLE_IDLIST\\n' jasmine.vcf > dup_sv.txt # Select representative SV based on the maximum value of reads supporting the SV (INFO/RE) harmonisv represent \\ -i input.vcf \\ -o dedup.vcf \\ --merge dup_sv.txt \\ --by-max RE \\ --min-len-input 30 \\ --min-len-output 30","title":"2. Remove duplicated SVs within the same sample and method"},{"location":"SV_analysis/represent/#arguments","text":"","title":"Arguments"},{"location":"SV_analysis/represent/#inputoutput-arguments","text":"-i, --invcf VCF input VCF -f, --manifest TSV manifest file, one VCF per line -o, --outvcf VCF output VCF --merge FILE SV merging results, each line is a comma-separated list of IDs of merged SVs, or the ID of unique SVs -r, --region CHR genomic region to work on (requires VCF with index)","title":"Input/Output arguments:"},{"location":"SV_analysis/represent/#representative-sv-selection-arguments","text":"--id-prefix ID Rename output SV ID as PREFIX.SVTYPE.NUMBER --by-max TAG Select representative SV by maximum INFO/TAG value --by-freq Select representative SV by frequency of POS, SVLEN, if >1 SVs have same frequency, select the one closest to average POS, SVLEN --save-id Save original IDs to INFO/ID_LIST --keep-hom-ref Keep SVs with AC=0 before selecting representative SV (Default: False) --min-len-input N Remove SVLEN < min_len_input before selecting representative SV (Default: 35) --min-len-output N Remove SVLEN < min_len_output from output (Default: 50)","title":"Representative SV selection arguments:"},{"location":"VCF_manipulation/harmonize/","text":"harmonize Harmonize SV VCFs across samples and SV calling methods Last updated: 2023-12-05 Input VCF : Format : bi-allelic VCF/BCF files following the VCF specification Required INFO : SVTYPE , if other name is used, specify by --svtype Output VCF : harmonized VCF/BCF files. ID format : {PREFIX}.{SVTYPE}.{NUMBER} if --rename-id --id-prefix PREFIX is specified, otherwise the same as input. Usage harmonisv harmonize [options] -i <input_vcf> -o <output_vcf> Input filtering By default, the following records will be removed: Records with missing ID or duplicated ID if --rename-id is not specified Records without INFO/SVTYPE Records' INFO/SVTYPE not in \"INS, DEL, DUP, INV, CNV, BND\" If the types of SVs are stored in INFO field with different names, use --svtype to specify the tag name. If the SV types are not in the above list, use --INS , --DEL , --DUP , --INV , --CNV , --BND to normalize the SV types. For example, --info SVTYPE_raw=SVTYPE --DUP DUP,DUP:TANDEM will normalize SVTYPE=DUP:TANDEM to SVTYPE=DUP;SVTYPE_raw=DUP:TANDEM . To disable the check, use --no-check . VCF headers The VCF headers produced by different SV calling methods are usually not compatable. It is necessary to have a unified VCF header for downstream analysis. If only INFO tags from the original VCFs will be used, one simple method is to use harmonisv harmonize-header to combine the headers from all VCFs (see harmonize-header ). However, if any new INFO tags will be added / renamed, please use --header-str to specify them. For example, the following command will combine the headers of method A, B, and C, and add INFO/STRANDS header. harmonisv harmonize-header \\ -i A.vcf,B.vcf,C.vcf \\ -o harmonized_header.txt \\ for vcf in A.vcf B.vcf C.vcf; do harmonisv harmonize \\ -i $vcf \\ -o harmonized.$vcf \\ --header harmonized_header.txt \\ --header-str 'STRANDS,1,String,Strand orientation of supporting reads' done Examples In this example, we will rename variant ID, normalize SVTYPE, and extract the basic SV calling information: SVTYPE SVLEN END STRANDS (if exists) DP (sequencing depth) RE (number of reads supporting the SV) Please note that SV-calling methods may store this information under different names. For instance, INFO/SUPPORT might be used for RE , and FORMAT/DP for DP . The sequencing depth might also be provided separately for REF and ALT alleles (e.g., FORMAT/DR and FORMAT/DV ). Additionally, the same type of SV might have different names in different methods (e.g., DUP:TANDEM vs DUP ). All the harmonized information will be stored in the INFO field. Sniffles2 (ver 2.0.6) harmonisv harmonize \\ -i HG002.minimap2.sniffles.vcf \\ # input VCF -o HG002.minimap2.sniffles.harmonized.vcf \\ # output VCF --info SVTYPE,SVLEN,END,STRANDS=STRAND \\ # INFO fields to be kept, rename STRAND to STRANDS --format-to-info RE=DV \\ # Extract FORMAT/DV to INFO/RE --format-to-info-sum DP=DR,DP=DV \\ # Calculate INFO/DP = FORMAT/DR + FORMAT/DV --header harmonized_header.txt \\ # Replace VCF header --id-prefix HG002.minimap2.sniffles \\ # {SAMPLE}.{ALIGNER}.{CALLER} --rename-id # Rename all variant ID SVIM (ver 2.0.0) harmonisv harmonize \\ -i HG002.minimap2.svim.vcf \\ # input VCF -o HG002.minimap2.svim.harmonized.vcf \\ # output VCF --info SVTYPE,SVLEN,END,RE=SUPPORT \\ # INFO fields to be kept, rename SUPPORT to RE --format-to-info DP=DP \\ # Extract FORMAT/DP to INFO/DP --DUP DUP,DUP:TANDEM,DUP:INT \\ # Normalize the name of duplications --header harmonized_header.txt \\ # Harmonized VCF header --id-prefix HG002.minimap2.svim \\ # {SAMPLE}.{ALIGNER}.{CALLER} --rename-id # Rename all variant ID cuteSV (ver 2.0.3) harmonisv harmonize \\ -i HG002.minimap2.cuteSV.vcf \\ # input VCF -o HG002.minimap2.cuteSV.harmonized.vcf \\ # output VCF --info SVTYPE,SVLEN,END,RE \\ # INFO fields to be kept --format-to-info-sum DP=DR,DP=DV \\ # Calculate INFO/DP = FORMAT/DR + FORMAT/DV --header harmonized_header.txt \\ # Harmonized VCF header --id-prefix HG002.minimap2.cuteSV \\ # {SAMPLE}.{ALIGNER}.{CALLER} --rename-id # Rename all variant ID By default, all INFO tags not specified in --info will be removed. To keep all original INFO tags, use --keep-all . To keep the original INFO tags before renaming, use --keep-old . Meanwhile, allele count (AC) and allele number (AN) will also be automatically computed from genotypes. To disable this feature, use --no-AC . Particularly, harmonisv harmonize -i input.vcf -o output.vcf --keep-all --no-AC --no-check should produce the same variant records as the input (some VCF headers are still added). Arguments Input/Output arguments: -i, --invcf VCF input VCF -o, --outvcf VCF output VCF VCF INFO manipulation: --info TAG Comma separated INFO tags to extract or rename. INFO tags can be renamed by NEW=OLD, from high prioirty to low priority, e.g., 'NEW=OLD1,NEW=OLD2' means if OLD1 is present, use OLD1, otherwise use OLD2. --info-sum TAG Comma separated INFO tags to extract and sum. Old tags with the same new tag name will be summed up, e.g., 'NEW=OLD1,NEW=OLD2' means 'INFO/NEW = INFO/OLD1 + INFO/OLD2'. Please define the header of new tags in --header or --header-str --format-to-info TAG Comma separated FORMAT tags to sum across samples and add to INFO, from high prioirty to low priority, e.g., DP=DP means 'INFO/DP = sum(FORMAT/DP)'. --format-to-info-sum TAG Comma separated FORMAT tags to sum across samples and tags and add to INFO, e.g., 'DP=DR,DP=DV' means 'INFO/DP = sum(FORMAT/DR) + sum(FORMAT/DV)'. Please define the header of new tags in --header or --header-str --info-to-alt TAG Comma separated INFO tags to fill in ALT, from high prioirty to low priority. This is useful if insertion sequence stored in INFO. --keep-old Keep original INFO tags after renaming or sum (default: False) --keep-all Keep all original INFO tags (default: False) --no-AC Disable automatically add AC and AN to INFO (default: False) VCF header manipulation: --header FILE New VCF header file to replace the header of input VCF. --header-str string Semicolon separated INFO header string added to new header (metadata separated by comma), e.g., 'DP,1,Integar,Sequencing depth;AF,1,Float,Allele frequency' Structural variation format: --id-prefix PREFIX Rename SV ID to PREFIX.raw_ID. Final ID should be Sample.Aligner.Caller.unique_id for downstream analysis --rename-id Rename SV ID to PREFIX.SVTYPE.No., must use with --id-prefix --svtype SVTYPE INFO tag stores the structural variation type (default: SVTYPE), will rename it to SVTYPE if not. --INS INS Comma separated SVTYPE string for insertions, will be nomalized as INS (default: INS) --DEL DEL Comma separated SVTYPE string for deletions, will be nomalized as DEL (default: DEL) --DUP DUP Comma separated SVTYPE string for duplications, will be nomalized as DUP (default: DUP) --INV INV Comma separated SVTYPE string for inversions, will be nomalized as INV (default: INV) --CNV CNV Comma separated SVTYPE string for copy number variations, will be nomalized as CNV (default: CNV) --BND BND Comma separated SVTYPE string for breakends, will be nomalized as BND (default: BND) --no-check Disable check and filter on variant ID and SVTYPE (default: False)","title":"harmonize"},{"location":"VCF_manipulation/harmonize/#harmonize","text":"Harmonize SV VCFs across samples and SV calling methods Last updated: 2023-12-05","title":"harmonize"},{"location":"VCF_manipulation/harmonize/#input","text":"VCF : Format : bi-allelic VCF/BCF files following the VCF specification Required INFO : SVTYPE , if other name is used, specify by --svtype","title":"Input"},{"location":"VCF_manipulation/harmonize/#output","text":"VCF : harmonized VCF/BCF files. ID format : {PREFIX}.{SVTYPE}.{NUMBER} if --rename-id --id-prefix PREFIX is specified, otherwise the same as input.","title":"Output"},{"location":"VCF_manipulation/harmonize/#usage","text":"harmonisv harmonize [options] -i <input_vcf> -o <output_vcf>","title":"Usage"},{"location":"VCF_manipulation/harmonize/#input-filtering","text":"By default, the following records will be removed: Records with missing ID or duplicated ID if --rename-id is not specified Records without INFO/SVTYPE Records' INFO/SVTYPE not in \"INS, DEL, DUP, INV, CNV, BND\" If the types of SVs are stored in INFO field with different names, use --svtype to specify the tag name. If the SV types are not in the above list, use --INS , --DEL , --DUP , --INV , --CNV , --BND to normalize the SV types. For example, --info SVTYPE_raw=SVTYPE --DUP DUP,DUP:TANDEM will normalize SVTYPE=DUP:TANDEM to SVTYPE=DUP;SVTYPE_raw=DUP:TANDEM . To disable the check, use --no-check .","title":"Input filtering"},{"location":"VCF_manipulation/harmonize/#vcf-headers","text":"The VCF headers produced by different SV calling methods are usually not compatable. It is necessary to have a unified VCF header for downstream analysis. If only INFO tags from the original VCFs will be used, one simple method is to use harmonisv harmonize-header to combine the headers from all VCFs (see harmonize-header ). However, if any new INFO tags will be added / renamed, please use --header-str to specify them. For example, the following command will combine the headers of method A, B, and C, and add INFO/STRANDS header. harmonisv harmonize-header \\ -i A.vcf,B.vcf,C.vcf \\ -o harmonized_header.txt \\ for vcf in A.vcf B.vcf C.vcf; do harmonisv harmonize \\ -i $vcf \\ -o harmonized.$vcf \\ --header harmonized_header.txt \\ --header-str 'STRANDS,1,String,Strand orientation of supporting reads' done","title":"VCF headers"},{"location":"VCF_manipulation/harmonize/#examples","text":"In this example, we will rename variant ID, normalize SVTYPE, and extract the basic SV calling information: SVTYPE SVLEN END STRANDS (if exists) DP (sequencing depth) RE (number of reads supporting the SV) Please note that SV-calling methods may store this information under different names. For instance, INFO/SUPPORT might be used for RE , and FORMAT/DP for DP . The sequencing depth might also be provided separately for REF and ALT alleles (e.g., FORMAT/DR and FORMAT/DV ). Additionally, the same type of SV might have different names in different methods (e.g., DUP:TANDEM vs DUP ). All the harmonized information will be stored in the INFO field. Sniffles2 (ver 2.0.6) harmonisv harmonize \\ -i HG002.minimap2.sniffles.vcf \\ # input VCF -o HG002.minimap2.sniffles.harmonized.vcf \\ # output VCF --info SVTYPE,SVLEN,END,STRANDS=STRAND \\ # INFO fields to be kept, rename STRAND to STRANDS --format-to-info RE=DV \\ # Extract FORMAT/DV to INFO/RE --format-to-info-sum DP=DR,DP=DV \\ # Calculate INFO/DP = FORMAT/DR + FORMAT/DV --header harmonized_header.txt \\ # Replace VCF header --id-prefix HG002.minimap2.sniffles \\ # {SAMPLE}.{ALIGNER}.{CALLER} --rename-id # Rename all variant ID SVIM (ver 2.0.0) harmonisv harmonize \\ -i HG002.minimap2.svim.vcf \\ # input VCF -o HG002.minimap2.svim.harmonized.vcf \\ # output VCF --info SVTYPE,SVLEN,END,RE=SUPPORT \\ # INFO fields to be kept, rename SUPPORT to RE --format-to-info DP=DP \\ # Extract FORMAT/DP to INFO/DP --DUP DUP,DUP:TANDEM,DUP:INT \\ # Normalize the name of duplications --header harmonized_header.txt \\ # Harmonized VCF header --id-prefix HG002.minimap2.svim \\ # {SAMPLE}.{ALIGNER}.{CALLER} --rename-id # Rename all variant ID cuteSV (ver 2.0.3) harmonisv harmonize \\ -i HG002.minimap2.cuteSV.vcf \\ # input VCF -o HG002.minimap2.cuteSV.harmonized.vcf \\ # output VCF --info SVTYPE,SVLEN,END,RE \\ # INFO fields to be kept --format-to-info-sum DP=DR,DP=DV \\ # Calculate INFO/DP = FORMAT/DR + FORMAT/DV --header harmonized_header.txt \\ # Harmonized VCF header --id-prefix HG002.minimap2.cuteSV \\ # {SAMPLE}.{ALIGNER}.{CALLER} --rename-id # Rename all variant ID By default, all INFO tags not specified in --info will be removed. To keep all original INFO tags, use --keep-all . To keep the original INFO tags before renaming, use --keep-old . Meanwhile, allele count (AC) and allele number (AN) will also be automatically computed from genotypes. To disable this feature, use --no-AC . Particularly, harmonisv harmonize -i input.vcf -o output.vcf --keep-all --no-AC --no-check should produce the same variant records as the input (some VCF headers are still added).","title":"Examples"},{"location":"VCF_manipulation/harmonize/#arguments","text":"","title":"Arguments"},{"location":"VCF_manipulation/harmonize/#inputoutput-arguments","text":"-i, --invcf VCF input VCF -o, --outvcf VCF output VCF","title":"Input/Output arguments:"},{"location":"VCF_manipulation/harmonize/#vcf-info-manipulation","text":"--info TAG Comma separated INFO tags to extract or rename. INFO tags can be renamed by NEW=OLD, from high prioirty to low priority, e.g., 'NEW=OLD1,NEW=OLD2' means if OLD1 is present, use OLD1, otherwise use OLD2. --info-sum TAG Comma separated INFO tags to extract and sum. Old tags with the same new tag name will be summed up, e.g., 'NEW=OLD1,NEW=OLD2' means 'INFO/NEW = INFO/OLD1 + INFO/OLD2'. Please define the header of new tags in --header or --header-str --format-to-info TAG Comma separated FORMAT tags to sum across samples and add to INFO, from high prioirty to low priority, e.g., DP=DP means 'INFO/DP = sum(FORMAT/DP)'. --format-to-info-sum TAG Comma separated FORMAT tags to sum across samples and tags and add to INFO, e.g., 'DP=DR,DP=DV' means 'INFO/DP = sum(FORMAT/DR) + sum(FORMAT/DV)'. Please define the header of new tags in --header or --header-str --info-to-alt TAG Comma separated INFO tags to fill in ALT, from high prioirty to low priority. This is useful if insertion sequence stored in INFO. --keep-old Keep original INFO tags after renaming or sum (default: False) --keep-all Keep all original INFO tags (default: False) --no-AC Disable automatically add AC and AN to INFO (default: False)","title":"VCF INFO manipulation:"},{"location":"VCF_manipulation/harmonize/#vcf-header-manipulation","text":"--header FILE New VCF header file to replace the header of input VCF. --header-str string Semicolon separated INFO header string added to new header (metadata separated by comma), e.g., 'DP,1,Integar,Sequencing depth;AF,1,Float,Allele frequency'","title":"VCF header manipulation:"},{"location":"VCF_manipulation/harmonize/#structural-variation-format","text":"--id-prefix PREFIX Rename SV ID to PREFIX.raw_ID. Final ID should be Sample.Aligner.Caller.unique_id for downstream analysis --rename-id Rename SV ID to PREFIX.SVTYPE.No., must use with --id-prefix --svtype SVTYPE INFO tag stores the structural variation type (default: SVTYPE), will rename it to SVTYPE if not. --INS INS Comma separated SVTYPE string for insertions, will be nomalized as INS (default: INS) --DEL DEL Comma separated SVTYPE string for deletions, will be nomalized as DEL (default: DEL) --DUP DUP Comma separated SVTYPE string for duplications, will be nomalized as DUP (default: DUP) --INV INV Comma separated SVTYPE string for inversions, will be nomalized as INV (default: INV) --CNV CNV Comma separated SVTYPE string for copy number variations, will be nomalized as CNV (default: CNV) --BND BND Comma separated SVTYPE string for breakends, will be nomalized as BND (default: BND) --no-check Disable check and filter on variant ID and SVTYPE (default: False)","title":"Structural variation format:"},{"location":"VCF_manipulation/harmonize_header/","text":"harmonize-header Harmonize VCF headers Last updated: 2023-12-05 Input VCF : Any VCF/BCF files following the VCF specification. Output VCF header : harmonized VCF header containing all header records of input VCFs Usage harmonisv harmonize-header [options] -i <input_vcf> -o <output_header> Examples In this example, the VCF headers from cuteSV, sniffles, and svim are harmonized. If one header occurs in more than one VCF, the priority is: sniffles > cuteSV > svim (based on the input order). harmonisv harmonize-header \\ -i HG002.minimap2.cuteSV.vcf,HG002.minimap2.sniffles.vcf,HG002.minimap2.svim.vcf \\ -o harmonized_header.txt \\ -r HG002.minimap2.sniffles.vcf # reference VCF has the highest priority Input: HG002.minimap2.cuteSV.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Precise structural variant\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Imprecise structural variant\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT NULL HG002.minimap2.sniffles.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE HG002.minimap2.svim.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT Sample Output: PRECISE , IMPRECISE , SVLEN , SVTYPE are defined in multiple VCFs, and the output use the definition in sniffles as it has the highest priority. STDEV_POS , STDEV_LEN , STD_SPAN , STD_POS are defined in single VCF and are appended to the output header. ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE Arguments Input/Output arguments: -i, --invcf VCF Comma-separated list of input VCF files. Duplicate headers will use the first one, including SAMPLE header. For multi-sample VCF, please make sure all input VCFs have the same SAMPLE order. -f, --file-list FILE_LIST File containing a list of input VCF files, one VCF per line. VCFs from both -i and -f will be used. -o, --output OUTPUT Output VCF header file optional arguments: -r, --ref-vcf VCF Reference VCF file, highest priority for duplicated headers","title":"harmonize-header"},{"location":"VCF_manipulation/harmonize_header/#harmonize-header","text":"Harmonize VCF headers Last updated: 2023-12-05","title":"harmonize-header"},{"location":"VCF_manipulation/harmonize_header/#input","text":"VCF : Any VCF/BCF files following the VCF specification.","title":"Input"},{"location":"VCF_manipulation/harmonize_header/#output","text":"VCF header : harmonized VCF header containing all header records of input VCFs","title":"Output"},{"location":"VCF_manipulation/harmonize_header/#usage","text":"harmonisv harmonize-header [options] -i <input_vcf> -o <output_header>","title":"Usage"},{"location":"VCF_manipulation/harmonize_header/#examples","text":"In this example, the VCF headers from cuteSV, sniffles, and svim are harmonized. If one header occurs in more than one VCF, the priority is: sniffles > cuteSV > svim (based on the input order). harmonisv harmonize-header \\ -i HG002.minimap2.cuteSV.vcf,HG002.minimap2.sniffles.vcf,HG002.minimap2.svim.vcf \\ -o harmonized_header.txt \\ -r HG002.minimap2.sniffles.vcf # reference VCF has the highest priority Input: HG002.minimap2.cuteSV.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Precise structural variant\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Imprecise structural variant\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT NULL HG002.minimap2.sniffles.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE HG002.minimap2.svim.vcf: ##fileformat=VCFv4.2 ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variant\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Difference in length between REF and ALT alleles\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT Sample Output: PRECISE , IMPRECISE , SVLEN , SVTYPE are defined in multiple VCFs, and the output use the definition in sniffles as it has the highest priority. STDEV_POS , STDEV_LEN , STD_SPAN , STD_POS are defined in single VCF and are appended to the output header. ##fileformat=VCFv4.2 ##INFO=<ID=PRECISE,Number=0,Type=Flag,Description=\"Structural variation with precise breakpoints\"> ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description=\"Structural variation with imprecise breakpoints\"> ##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length of structural variation\"> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=\"Type of structural variation\"> ##INFO=<ID=STDEV_POS,Number=1,Type=Float,Description=\"Standard deviation of structural variation start position\"> ##INFO=<ID=STDEV_LEN,Number=1,Type=Float,Description=\"Standard deviation of structural variation length\"> ##INFO=<ID=STD_SPAN,Number=1,Type=Float,Description=\"Standard deviation in span of merged SV signatures\"> ##INFO=<ID=STD_POS,Number=1,Type=Float,Description=\"Standard deviation in position of merged SV signatures\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE","title":"Examples"},{"location":"VCF_manipulation/harmonize_header/#arguments","text":"","title":"Arguments"},{"location":"VCF_manipulation/harmonize_header/#inputoutput-arguments","text":"-i, --invcf VCF Comma-separated list of input VCF files. Duplicate headers will use the first one, including SAMPLE header. For multi-sample VCF, please make sure all input VCFs have the same SAMPLE order. -f, --file-list FILE_LIST File containing a list of input VCF files, one VCF per line. VCFs from both -i and -f will be used. -o, --output OUTPUT Output VCF header file","title":"Input/Output arguments:"},{"location":"VCF_manipulation/harmonize_header/#optional-arguments","text":"-r, --ref-vcf VCF Reference VCF file, highest priority for duplicated headers","title":"optional arguments:"}]}