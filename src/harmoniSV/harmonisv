#!/usr/bin/env python3

# HarmoniSV
# A toolkit to harmonize and filter structural variations across methods and samples
#
# Last update: 25-Nov-2024
# Author: Han Cao
# Contact: hcaoad@connect.ust.hk

VERSION = "0.1.0"

import argparse
import logging
import sys

COMMAND_LIST = ['harmonize', 'harmonize-header', 'represent', 'genotype', 'filter', 'sample2pop', 'intersect', 'concordance']


USAGE = f"""
HarmoniSV: A toolkit to harmonize and filter structural variantions across methods and samples
Version: {VERSION}

Usage: harmonisv <command> [options]

Commands:

 -- VCF manipulation
    harmonize          Harmonize SV VCFs across samples and SV calling methods
    harmonize-header   Harmonize VCF headers
    sample2pop         Convert single-sample VCF to multi-sample VCF
    intersect          Intersect SVs with genomic features

 -- Analysis on SV callset
    represent          Select the representative SV from merged SVs
    genotype           Genotype SVs across SV genotyping methods
    filter             Random forest filter for SVs
    concordance        Calculate genotype concordance between two VCFs


Note:
    1. All input VCFs MUST follow the VCF specification
    2. Some commands assume specific variant ID format to index SVs from different methods and samples, 
       please check the required ID format before you use
    3. The input/output VCF format (i.e., vcf, vcf.gz, bcf) will be automatically detected. However, a 
       temporary uncompressed VCF file will be generated if the output is vcf.gz or bcf.
              

For help on a specific command, run:
    harmonisv <command> -h
"""



def main():
    """Main function"""

    parser = argparse.ArgumentParser(description=USAGE, 
                                     formatter_class=argparse.RawDescriptionHelpFormatter, 
                                     usage=argparse.SUPPRESS)

    parser.add_argument("command", metavar="command", choices=COMMAND_LIST, type=str, default=None,
                        help="Command to execute")
    parser.add_argument("options", metavar="options", nargs=argparse.REMAINDER,
                        help="Options to pass to the command")
    
    if len(sys.argv) == 1:
        print(USAGE, file=sys.stderr) 
        sys.exit(1)
    
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO,
                    format='[%(asctime)s] - [%(levelname)s]: %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')
    print(f'HarmoniSV: {VERSION}', file=sys.stderr)

    if args.command == 'harmonize':
        from harmonizeVCF import harmonizeVCF_main
        harmonizeVCF_main(args.options)
    
    elif args.command == 'harmonize-header':
        from harmonizeHeader import harmonizeHeader_main
        harmonizeHeader_main(args.options)
    
    elif args.command == 'represent':
        from representSV import representSV_main
        representSV_main(args.options)

    elif args.command == 'genotype':
        from genotypeSV import genotypeSV_main
        genotypeSV_main(args.options)

    elif args.command == 'filter':
        from filterSV import filterSV_main
        filterSV_main(args.options)

    elif args.command == 'sample2pop':
        from sample2pop import sample2pop_main
        sample2pop_main(args.options)

    elif args.command == 'intersect':
        from intersectSV import intersectSV_main
        intersectSV_main(args.options)

    elif args.command == 'concordance':
        from concordanceVCF import concordanceVCF_main
        concordanceVCF_main(args.options)


if __name__ == "__main__":
    main()
